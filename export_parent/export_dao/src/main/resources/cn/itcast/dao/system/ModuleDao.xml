<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.itcast.dao.system.ModuleDao">
    <resultMap id="BaseResultMap" type="cn.itcast.domain.system.Module">
        <id column="module_id" property="id" />
        <result column="parent_id" property="parentId" />
        <result column="parent_name" property="parentName" />
        <result column="name" property="name" />
        <result column="layer_num" property="layerNum" />
        <result column="is_leaf" property="isLeaf" />
        <result column="ico" property="ico" />
        <result column="cpermission" property="cpermission" />
        <result column="curl" property="curl" />
        <result column="ctype" property="ctype" />
        <result column="state" property="state" />
        <result column="belong" property="belong" />
        <result column="cwhich" property="cwhich" />
        <result column="quote_num" property="quoteNum" />
        <result column="remark" property="remark" />
        <result column="order_no"  property="orderNo" />
    </resultMap>
    <select id="findAll" resultMap="BaseResultMap">
        select *from ss_module
    </select>

    <insert id="save" parameterType="cn.itcast.domain.system.Module">
        insert into ss_module (module_id, parent_id, parent_name, name, layer_num, is_leaf,
        ico, cpermission, curl, ctype, state, belong, cwhich, quote_num,
        remark, order_no)
        values (#{id}, #{parentId}, #{parentName}, #{name}, #{layerNum}, #{isLeaf},
        #{ico}, #{cpermission}, #{curl}, #{ctype}, #{state}, #{belong}, #{cwhich}, #{quoteNum},
        #{remark}, #{orderNo})
    </insert>

    <select id="findById" parameterType="string" resultMap="BaseResultMap">
        select *from ss_module where module_id=#{id}
    </select>

<!--    保存编辑信息-->
    <update id="update" parameterType="cn.itcast.domain.system.Module">
         update ss_module
            set parent_id = #{parentId},
            parent_name = #{parentName},
            name = #{name},
            layer_num = #{layerNum},
            is_leaf = #{isLeaf},
            ico = #{ico},
            cpermission = #{cpermission},
            curl = #{curl},
            ctype = #{ctype},
            state = #{state},
            belong = #{belong},
            cwhich = #{cwhich},
            quote_num = #{quoteNum},
            remark = #{remark},
            order_no = #{orderNo}
            where module_id = #{id}
    </update>

    <delete id="delete" parameterType="string">
        delete from ss_module where module_id=#{id}
    </delete>

    <select id="findByRoleId" parameterType="string" resultMap="BaseResultMap">
        SELECT ss_module.*FROM pe_role_module
            INNER JOIN ss_module ON pe_role_module.module_id=ss_module.module_id
            WHERE role_id =#{roleId}
    </select>
    
<!--    通过roleid删除中间表的moduleid-->
    <delete id="deleteByRoleId" parameterType="string">
        delete from pe_role_module where role_id=#{roleid}
    </delete>

    <insert id="insertRoleModule" parameterType="string" >
        insert into pe_role_module (role_id,module_id) values (#{roleid},#{moduleId})
    </insert>

    <select id="findByDegree" parameterType="int" resultMap="BaseResultMap">
        select *from ss_module where belong=#{belong}
    </select>

    <select id="findModuleByUserId" parameterType="string" resultMap="BaseResultMap">
        SELECT *FROM ss_module WHERE module_id IN(
            SELECT DISTINCT module_id FROM pe_role_user pru
                INNER JOIN pe_role_module prm ON prm.role_id=pru.role_id
                WHERE user_id=#{userId})
    </select>
</mapper>